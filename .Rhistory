getwd()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
ft<-num_vect>=6
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Radee")
my_name
paste(my_name,collapse=" ")
paste("Hello","World",sep=" ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect())
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cname<-c("patient","age","weight","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
rm(ls)
rm(ls())
?rm
rm(list)
ls()
?list
rm(list=ls())
x>3
x<-4
y <- if(x>3){10} else{1}
for(i in 1:10){i}
for(i in 1:10){print(i)}
add<-function(x,y){
x+y
}
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x,n){
use <- x > n
x[use]
}
above[1:20,10]
x<-1:20
above[x,10]
above(1:20,10)
above <- function(x,n=10){
use <- x > n
x[use]
}
above(x)
above(x,12)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
?matrix
f<-matrix(1:18,nrow=3,ncolumn=6)
f <- matrix(1:18,nrow=3,ncol=6)
f
a <- columnmean(f)
a
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm=removeNA)
}
means
}
f<-c(NA,1:10,NA,NA)
f<-matrix(f,nrow=5,ncol=3)
f<-c(NA,NA,NA,1:10,NA,NA)
f<-matrix(f,nrow=5,ncol=3)
f
columnmean(f)
?str
str(1:10)
str(c("a","b","c"))
paste(c("a","b"),sep=" ")
?source
x<-1:10
if(x>5){x<-0}
library(swiirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat
)
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,unique)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
?mapply
library(datasets)
data(iris)
?mapply
?tapply
tapply(iris$Sepal.Length,iris$Species="virginica",mean)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
str(mtcars)
?sapply
tapply(mtcars$hp,mtcars$cyl,range)
113-150
debug(mean)
mean(mtcars$hp)
with(mtcars, tapply(mpg, cyl, mean))
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$hp,mtcars$cyl,range)
335-113
150-52+335-113
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
getwd()
setwd("C:/Users/mahmo/Documents/R/R Programming/2/ProgrammingAssignment2")
?inverse.gaussian
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
source("cachematrix.R")
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$getinverse()
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$getinverse()
cacheSolve(my_matrix)
